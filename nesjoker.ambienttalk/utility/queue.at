/*
Copyright (C) 2013 Johan Ceuppens

This program is free software; you can redistribute it and/or modify it unde    r the terms of the GNU General Public License as published by the Free Softw    are Foundation; either version 2 of the License, or (at your option) any lat    er version.

This program is distributed in the hope that it will be useful, but WITHOUT     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNES    S FOR A PARTICULAR PURPOSE. See the GNU General Public License for more deta    ils.

You should have received a copy of the GNU General Public License along with     this program; if not, write to the Free Software Foundation, Inc., 59 Templ    e Place, Suite 330, Boston, MA 02111-1307 USA
*/
object: {
	def queue := extend: queuebase with: {
		def listbase := object: {
			def Enumerable := object: {
			    def collect: closure {
			        def c := self.new([]);
			        self.each: { |v|
			            c.add(closure(v));
			        };
			        c;
			    };
			};

		    def elements := [];
		    def init(a) { elements := a; };
		    def add(v) { elements := elements + [v]; self };
		    def collect: closure {
		        Enumerable^collect: closure;
		    };
		    def each: clo {
		        1.to: elements.length + 1 do: { |i|
		            clo(elements[i]);
		        };
		};
		};
		def queuebase := extend: listbase with: {
			def init(l) { self.elements := l };
			def add(u) { elements := each: self.&add(u) };
			def range(l, start,stop) {
				r := [];
        			start.to: l.length - (l.length - stop) do: 
				{ |u| r := [u, r] };
				r
			};
		};
		def init() { };
		def pop() {
			e := nil;
			if: (elements.length() > 0) then: {
				e := elements[0];
			};

			if: (e) then: {
				elements := self.range(elements, 1, elements.length(); };
			e 
		};
		def push(u) { self.add(u) };
	};
};

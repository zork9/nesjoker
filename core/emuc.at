/*
Copyright (C) 2013 Johan Ceuppens

This program is free software; you can redistribute it and/or modify it unde    r the terms of the GNU General Public License as published by the Free Softw    are Foundation; either version 2 of the License, or (at your option) any lat    er version.

This program is distributed in the hope that it will be useful, but WITHOUT     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNES    S FOR A PARTICULAR PURPOSE. See the GNU General Public License for more deta    ils.

You should have received a copy of the GNU General Public License along with     this program; if not, write to the Free Software Foundation, Inc., 59 Templ    e Place, Suite 330, Boston, MA 02111-1307 USA
*/

object: {

def Utility := lobby.lib.nesjoker.utility;

//FIX pattern !
 emuc := object: {

	def instructions := Uitlity.Hash.new;

	def init() {};
	def sequence(cpul) {
		foreach: { |cpu| cpu.control() } in: cpul 
	};

 	def acbase := actor: { 
		//FIX better pattern !
		def init(specialactor) {
		foreach: { |cpu| def lambda := Utility.lambda(cpu); 
				((specialactor)acbase)<-cache(lambda);
			} in: cpul;
	};

	def cache(lamb) {
		def ac := extend: acbase with: {
			def cache(lamb) {
				//foreach: {|cpu| self.store(lamb,cpu) };
				self.store(lamb,cpu);
		};
		def store(lamb, cpu) {
			instructions.add(cpu, lamb);
		};
	};

	//JIT instruction 
	def execute(acclo) {
		foreach: { |cpu, lamb| } in: 
			instructions.collect: acclo1()  { acclo() };
	};

	//FIX make a JIT AI fetcher
	def fetch(fetcher) {
			fetcher.new(instructions.get(0));
	};

};

};
